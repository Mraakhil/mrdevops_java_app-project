@Library('my-shared-library') _

pipeline {
    agent any

    parameters {
        choice(name: 'action', choices: ['create', 'delete'], description: 'Choose create or delete')
    }

    tools {
        jdk 'java17'
        maven 'maven3'
    }

    stages {
        stage('Verify Java Version') {
            steps {
                sh 'java -version'
            }
        }

        stage('Git Checkout') {
            when {
                expression { params.action == 'create' }
            }
            steps {
                script {
                    gitCheckout(
                        branch: "main",
                        url: "https://github.com/imranmycloud/mrdevops_java_app-project.git"
                    )
                }
            }
        }

        stage('Unit Test (Maven)') {
            when {
                expression { params.action == 'create' }
            }
            steps {
                sh 'mvn clean test'
            }
        }

        stage('Integration Test (Maven)') {
            when {
                expression { params.action == 'create' }
            }
            steps {
                // Correct flag if you're skipping unit tests:
                // Be sure to configure Failsafe plugin in your pom.xml
                sh 'mvn verify -DskipTests=false -Dtest=!**/*UnitTest*'
            }
        }

        stage('Static Code Analysis: SonarQube') {
            when {
                expression { params.action == 'create' }
            }
            steps {
                // Replace this with actual SonarQube scanner command
                // This line currently would fail unless `statiCodeAnalysis` is a defined shell alias or function
                sh 'mvn sonar:sonar -Dsonar.projectKey=your-key -Dsonar.host.url=http://your-sonar-server -Dsonar.login=your-token'
            }
        }
    }
}
